@using UI.App.Components
@using UI.App.Services
@using BlazorStrap
@using UI.Components
@inject AppState State
@page "/"

<SimpleComponent Name=@State.Name MyEvent=@OnComponentEvent ref="_simpleComponent"></SimpleComponent>

<div>
    <button onclick=@SetViaMethod>Set name via component method</button>
    <button onclick=@SetViaState>Set name via app state property</button>
    <button onclick=@SetViaStateMethod>Set name via app state method</button>
    <button onclick=@(() => StateHasChanged())>Fire StateHasChanged()</button>
</div>

<ObjectComponent Data=@State.Data></ObjectComponent>

<div>
    <button onclick=@SetStateData>Set state data</button>
    <button onclick=@IncreaseAge>Increase age</button>
    <button onclick=@UpdateStateByServer>Update by API</button>
</div>

<div>
    <button onclick=@(()=> IsOpen = true)>Open modal</button>
</div>

<Modal IsOpen=@IsOpen>
    <ModalHeader>Modal title</ModalHeader>
    <ModalBody><p>Modal body text goes here.</p></ModalBody>
    <ModalFooter>
        <BlazorButton Color="Color.Primary">Do Something</BlazorButton>
        <BlazorButton Color="Color.Secondary" OnClick=@CloseModal>Cancel</BlazorButton>
    </ModalFooter>
</Modal>

<Component1></Component1>

<TagSelector SelectableItems=@State.SelectableItems SelectedItems=@State.SelectedItems></TagSelector>

<button onclick=@CreateSelectableItems>Add Selectable Items</button>

@functions {

    private SimpleComponent _simpleComponent;

    private bool IsOpen { get; set; }

    private void SetViaMethod()
    {
        _simpleComponent.SetName($"Changed by method {DateTime.Now}");
    }

    private void SetViaState()
    {
        State.Name = $"Changed by app state property {DateTime.Now}";
    }

    private void SetViaStateMethod()
    {
        State.SetName($"Changed by app state method {DateTime.Now}");
    }

    private void OnComponentEvent()
    {
        SetViaStateMethod();
    }

    private void SetStateData()
    {
        State.Data = new ObjectComponentModel { Age = 1, Name = $"Hi at {DateTime.Now}" };
    }

    private void IncreaseAge()
    {
        State.Data.Age++;
    }

    private async Task UpdateStateByServer()
    {
        await State.UpdateByApi();
    }

    private void CloseModal(UIMouseEventArgs e)
    {
        IsOpen = false;
        StateHasChanged();
    }

    private void CreateSelectableItems()
    {
        State.SelectableItems = new[]
        {
            new TagSelectorItem("Key 1", "Value 1"),
            new TagSelectorItem("Key 2", "Value 2"),
            new TagSelectorItem("Key 3", "Value 3"),
            new TagSelectorItem("Key 4", "Value 4")
        };
    }
}